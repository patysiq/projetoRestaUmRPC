// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: oneLeft.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Chat_Action: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case start // = 0
  case move // = 1
  case reset // = 2
  case end // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .start
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .start
    case 1: self = .move
    case 2: self = .reset
    case 3: self = .end
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .start: return 0
    case .move: return 1
    case .reset: return 2
    case .end: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Chat_Action] = [
    .start,
    .move,
    .reset,
    .end,
  ]

}

struct Chat_AddRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var playName: String = String()

  var action: Chat_Action = .start

  var board: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Chat_AddResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var playName: String = String()

  var action: Chat_Action = .start

  var board: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Chat_FiboRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var playName: String = String()

  var action: Chat_Action = .start

  var board: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Chat_FiboResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var playName: String = String()

  var action: Chat_Action = .start

  var board: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Chat_ComputeAverageResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var playName: String = String()

  var action: Chat_Action = .start

  var board: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Chat_ComputeAverageRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var playName: String = String()

  var action: Chat_Action = .start

  var board: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Chat_FindMaximumRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var playName: String = String()

  var action: Chat_Action = .start

  var board: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Chat_FindMaximumResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var playName: String = String()

  var action: Chat_Action = .start

  var board: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "Chat"

extension Chat_Action: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "start"),
    1: .same(proto: "move"),
    2: .same(proto: "reset"),
    3: .same(proto: "end"),
  ]
}

extension Chat_AddRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playName"),
    2: .same(proto: "action"),
    3: .same(proto: "board"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.board) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playName.isEmpty {
      try visitor.visitSingularStringField(value: self.playName, fieldNumber: 1)
    }
    if self.action != .start {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    if !self.board.isEmpty {
      try visitor.visitPackedInt32Field(value: self.board, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chat_AddRequest, rhs: Chat_AddRequest) -> Bool {
    if lhs.playName != rhs.playName {return false}
    if lhs.action != rhs.action {return false}
    if lhs.board != rhs.board {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chat_AddResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playName"),
    2: .same(proto: "action"),
    3: .same(proto: "board"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.board) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playName.isEmpty {
      try visitor.visitSingularStringField(value: self.playName, fieldNumber: 1)
    }
    if self.action != .start {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    if !self.board.isEmpty {
      try visitor.visitPackedInt32Field(value: self.board, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chat_AddResponse, rhs: Chat_AddResponse) -> Bool {
    if lhs.playName != rhs.playName {return false}
    if lhs.action != rhs.action {return false}
    if lhs.board != rhs.board {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chat_FiboRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FiboRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playName"),
    2: .same(proto: "action"),
    3: .same(proto: "board"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.board) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playName.isEmpty {
      try visitor.visitSingularStringField(value: self.playName, fieldNumber: 1)
    }
    if self.action != .start {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    if !self.board.isEmpty {
      try visitor.visitPackedInt32Field(value: self.board, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chat_FiboRequest, rhs: Chat_FiboRequest) -> Bool {
    if lhs.playName != rhs.playName {return false}
    if lhs.action != rhs.action {return false}
    if lhs.board != rhs.board {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chat_FiboResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FiboResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playName"),
    2: .same(proto: "action"),
    3: .same(proto: "board"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.board) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playName.isEmpty {
      try visitor.visitSingularStringField(value: self.playName, fieldNumber: 1)
    }
    if self.action != .start {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    if !self.board.isEmpty {
      try visitor.visitPackedInt32Field(value: self.board, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chat_FiboResponse, rhs: Chat_FiboResponse) -> Bool {
    if lhs.playName != rhs.playName {return false}
    if lhs.action != rhs.action {return false}
    if lhs.board != rhs.board {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chat_ComputeAverageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ComputeAverageResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playName"),
    2: .same(proto: "action"),
    3: .same(proto: "board"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.board) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playName.isEmpty {
      try visitor.visitSingularStringField(value: self.playName, fieldNumber: 1)
    }
    if self.action != .start {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    if !self.board.isEmpty {
      try visitor.visitPackedInt32Field(value: self.board, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chat_ComputeAverageResponse, rhs: Chat_ComputeAverageResponse) -> Bool {
    if lhs.playName != rhs.playName {return false}
    if lhs.action != rhs.action {return false}
    if lhs.board != rhs.board {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chat_ComputeAverageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ComputeAverageRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playName"),
    2: .same(proto: "action"),
    3: .same(proto: "board"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.board) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playName.isEmpty {
      try visitor.visitSingularStringField(value: self.playName, fieldNumber: 1)
    }
    if self.action != .start {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    if !self.board.isEmpty {
      try visitor.visitPackedInt32Field(value: self.board, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chat_ComputeAverageRequest, rhs: Chat_ComputeAverageRequest) -> Bool {
    if lhs.playName != rhs.playName {return false}
    if lhs.action != rhs.action {return false}
    if lhs.board != rhs.board {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chat_FindMaximumRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FindMaximumRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playName"),
    2: .same(proto: "action"),
    3: .same(proto: "board"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.board) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playName.isEmpty {
      try visitor.visitSingularStringField(value: self.playName, fieldNumber: 1)
    }
    if self.action != .start {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    if !self.board.isEmpty {
      try visitor.visitPackedInt32Field(value: self.board, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chat_FindMaximumRequest, rhs: Chat_FindMaximumRequest) -> Bool {
    if lhs.playName != rhs.playName {return false}
    if lhs.action != rhs.action {return false}
    if lhs.board != rhs.board {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chat_FindMaximumResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FindMaximumResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playName"),
    2: .same(proto: "action"),
    3: .same(proto: "board"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.board) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playName.isEmpty {
      try visitor.visitSingularStringField(value: self.playName, fieldNumber: 1)
    }
    if self.action != .start {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    if !self.board.isEmpty {
      try visitor.visitPackedInt32Field(value: self.board, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chat_FindMaximumResponse, rhs: Chat_FindMaximumResponse) -> Bool {
    if lhs.playName != rhs.playName {return false}
    if lhs.action != rhs.action {return false}
    if lhs.board != rhs.board {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
